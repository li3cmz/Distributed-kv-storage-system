syntax = "proto3";

package rpcService;

service RPC {
    rpc RequestVote(requestVoteRequest) returns (requsetVoteResponse) {}
    rpc AppendEntries(appendEntriesRequest) returns (appendEntriesResponse) {}
    rpc Redirect(redirectRequest) returns (redirectResponse) {}

    rpc Get(getRequest) returns (getResponse) {}
    rpc Put(putRequest) returns (putResponse) {}
    rpc Del(delRequest) returns (delResponse) {}
    rpc Apply(applyRequest) returns (applyResponse) {}
}

message requestVoteRequest {
    int32 term = 1;
    string candidateId = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

message requsetVoteResponse {
    string responserId = 1;
    int32 responserTerm = 2;
    bool votedGranted = 3;
}

message appendEntriesRequest {
    int32 term = 1;
    string leaderId = 2;
    int32 prev_log_index = 3;
    int32 prev_log_term = 4;
    repeated string entries = 5;
    int32 leader_commit = 6;
}





message appendEntriesResponse {
    string responserId = 1;
    bool success = 2;
    int32 responserTerm = 3;
    string type = 4;
}

message redirectRequest {
    string key = 1;
    string value = 2;
    string type = 3;
    string clientport = 4;
}
message redirectResponse {
    bool success = 1;
}

message getRequest {
    string key = 1;
}

message getResponse {
    string key = 1;
    string value = 2;
    bool exist = 3;
    string error_msg = 4;
}

message putRequest {
    string key = 1;
    string value = 2;
    string type = 3;
    string clientport = 4;
}

message putResponse {
    bool success = 1;
    string error_msg = 2;
}

message delRequest {

}

message delResponse {

}

message applyRequest {
    int32 commit_index = 1;
}
message applyResponse {
    bool success = 1;
}