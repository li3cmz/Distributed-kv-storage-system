# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rpcService_pb2 as rpcService__pb2


class RPCStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RequestVote = channel.unary_unary(
        '/rpcService.RPC/RequestVote',
        request_serializer=rpcService__pb2.requestVoteRequest.SerializeToString,
        response_deserializer=rpcService__pb2.requsetVoteResponse.FromString,
        )
    self.AppendEntries = channel.unary_unary(
        '/rpcService.RPC/AppendEntries',
        request_serializer=rpcService__pb2.appendEntriesRequest.SerializeToString,
        response_deserializer=rpcService__pb2.appendEntriesResponse.FromString,
        )
    self.Redirect = channel.unary_unary(
        '/rpcService.RPC/Redirect',
        request_serializer=rpcService__pb2.redirectRequest.SerializeToString,
        response_deserializer=rpcService__pb2.redirectResponse.FromString,
        )
    self.Get = channel.unary_unary(
        '/rpcService.RPC/Get',
        request_serializer=rpcService__pb2.getRequest.SerializeToString,
        response_deserializer=rpcService__pb2.getResponse.FromString,
        )
    self.Put = channel.unary_unary(
        '/rpcService.RPC/Put',
        request_serializer=rpcService__pb2.putRequest.SerializeToString,
        response_deserializer=rpcService__pb2.putResponse.FromString,
        )
    self.Del = channel.unary_unary(
        '/rpcService.RPC/Del',
        request_serializer=rpcService__pb2.delRequest.SerializeToString,
        response_deserializer=rpcService__pb2.delResponse.FromString,
        )
    self.Apply = channel.unary_unary(
        '/rpcService.RPC/Apply',
        request_serializer=rpcService__pb2.applyRequest.SerializeToString,
        response_deserializer=rpcService__pb2.applyResponse.FromString,
        )


class RPCServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RequestVote(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AppendEntries(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Redirect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Put(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Del(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Apply(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RPCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RequestVote': grpc.unary_unary_rpc_method_handler(
          servicer.RequestVote,
          request_deserializer=rpcService__pb2.requestVoteRequest.FromString,
          response_serializer=rpcService__pb2.requsetVoteResponse.SerializeToString,
      ),
      'AppendEntries': grpc.unary_unary_rpc_method_handler(
          servicer.AppendEntries,
          request_deserializer=rpcService__pb2.appendEntriesRequest.FromString,
          response_serializer=rpcService__pb2.appendEntriesResponse.SerializeToString,
      ),
      'Redirect': grpc.unary_unary_rpc_method_handler(
          servicer.Redirect,
          request_deserializer=rpcService__pb2.redirectRequest.FromString,
          response_serializer=rpcService__pb2.redirectResponse.SerializeToString,
      ),
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=rpcService__pb2.getRequest.FromString,
          response_serializer=rpcService__pb2.getResponse.SerializeToString,
      ),
      'Put': grpc.unary_unary_rpc_method_handler(
          servicer.Put,
          request_deserializer=rpcService__pb2.putRequest.FromString,
          response_serializer=rpcService__pb2.putResponse.SerializeToString,
      ),
      'Del': grpc.unary_unary_rpc_method_handler(
          servicer.Del,
          request_deserializer=rpcService__pb2.delRequest.FromString,
          response_serializer=rpcService__pb2.delResponse.SerializeToString,
      ),
      'Apply': grpc.unary_unary_rpc_method_handler(
          servicer.Apply,
          request_deserializer=rpcService__pb2.applyRequest.FromString,
          response_serializer=rpcService__pb2.applyResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rpcService.RPC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
